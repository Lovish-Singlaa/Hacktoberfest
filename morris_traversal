// Java program to do Morris Inorder traversal of a binary tree
class Node {
    int data;
    Node left, right;

    public Node(int item) {
        data = item;
        left = right = null;
    }
}

class BinaryTree {
    Node root;

    void morrisTraversal(Node root) {
        Node current, pre;

        if (root == null)
            return;

        current = root;
        while (current != null) {
            // If left child is null, print the current node and move to right child
            if (current.left == null) {
                System.out.print(current.data + " ");
                current = current.right;
            } else {
                // Find the inorder predecessor of the current node
                pre = current.left;
                while (pre.right != null && pre.right != current) {
                    pre = pre.right;
                }

                // Make current as the right child of its inorder predecessor
                if (pre.right == null) {
                    pre.right = current;
                    current = current.left;
                }

                // Revert the changes made to restore the original tree structure
                else {
                    pre.right = null;
                    System.out.print(current.data + " ");
                    current = current.right;
                }
            }
        }
    }

    public static void main(String args[]) {
        BinaryTree tree = new BinaryTree();
        tree.root = new Node(1);
        tree.root.left = new Node(2);
        tree.root.right = new Node(3);
        tree.root.left.left = new Node(4);
        tree.root.left.right = new Node(5);

        System.out.println("Morris Inorder traversal of binary tree is: ");
        tree.morrisTraversal(tree.root);
    }
}
